[project]
name = "parallelization-pattern"
version = "1.0.0"
description = "LangGraph implementation of the Parallelization agentic pattern"
authors = [
    {name = "Giorgio Zoppi", email = "giorgio.zoppi@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "langgraph>=0.0.40",
    "langchain-openai>=0.1.0",
    "langchain-core>=0.1.0",
    "openai>=1.0.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "colorama>=0.4.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[project.scripts]
run-sample = "parallelization_app:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["travelagent"]

[tool.setuptools.package-data]
travelagent = ["py.typed"]

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "D",    # pydocstyle (Google docstring convention)
    "S",    # flake8-bandit (security)
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "D203",   # one-blank-line-before-class (incompatible with D211)
    "D213",   # multi-line-summary-second-line (incompatible with D212)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "D104"]  # unused imports, missing docstring
"tests/*.py" = ["S101", "D"]  # allow assert in tests, no docstring requirements

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["travelagent"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "langgraph.*",
    "langchain_openai.*",
    "langchain_core.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["travelagent"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
